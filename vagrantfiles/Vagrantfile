require File.expand_path('../provision-disk-and-reboot-plugin.rb', __FILE__)

# Node ID if it is a node
BUILDER = ENV['BUILDER'].to_s.strip.empty? ? 0 : ENV['BUILDER'].to_i

# Vagrantfile provider to use
VAGRANT_DEFAULT_PROVIDER = ENV['VAGRANT_DEFAULT_PROVIDER'].to_s.strip.empty? ? 'virtualbox'.freeze : ENV['VAGRANT_DEFAULT_PROVIDER']

# Load the Vagrantfile_vars file
$vagrantfilevars = File.expand_path('../vars', __FILE__)
load $vagrantfilevars

# Load the `scripts` file
$vagrantfilescripts = File.expand_path('../scripts', __FILE__)
load $vagrantfilescripts

# Load the type specific variables (e.g., server, builder) (0 is equal server)
if BUILDER == 0
    $box_image = "prolinux/koji-server"
    $hostname = 'server'
    $vmip = SERVER_IP
    $port = FWD_PORT
    $vmCPUs = SERVER_CPUS
    $vmMemory = SERVER_MEMORY_SIZE_GB * 1024
	$builderCount = BUILDER_COUNT
else
    $box_image = "prolinux/koji-builder"
    $hostname = BUILDER == 999 ? BUILDER_NAME : "builder-#{BUILDER}"
    $vmip = BUILDER == 999 ? MY_IP : BUILDER_IP
    $vmCPUs = BUILDER_CPUS
    $vmMemory = BUILDER_MEMORY_SIZE_GB * 1024
    $kojiHubIp = KOJIHUB_IP
end
$nfsMountpath = NFS_MOUNTPATH

Vagrant.configure('2') do |config|
    config.vm.box = $box_image
    config.vm.box_check_update = true

    config.vm.boot_timeout = 900

    config.vm.provider VAGRANT_DEFAULT_PROVIDER do |l|
        # Configure resources
        l.cpus = $vmCPUs
        l.memory = $vmMemory
        # Add disks for libvirt here as no (workaround) plugin is needed as for Virtualbox
        if VAGRANT_DEFAULT_PROVIDER == 'libvirt'
            if LIBVIRT_STORAGE_POOL != 'default'
                l.storage_pool_name = "#{LIBVIRT_STORAGE_POOL}"
            end
            (1..DISK_COUNT.to_i).each do |diskID|
                diskPath = "#{$hostname}-disk-#{diskID}.img"
                l. storage :file,
                    :size => "#{DISK_SIZE_GB}GB",
                    :path => diskPath,
                    :allow_existing => true
            end
        end
    end

    config.vm.define $hostname do |subconfig|
        subconfig.vm.hostname = $hostname

        # Virtualbox
        subconfig.vm.provider :virtualbox do |vb|
            vb.customize ['modifyvm', :id, '--uartmode1', 'disconnected']
            # Network configuration
            vb.customize ['modifyvm', :id, '--natdnshostresolver1', 'on']
        end

        # Network
        if $isPrivateNetwork
            subconfig.vm.network :private_network, :ip => $vmip
        else
            subconfig.vm.network :public_network,
                :bridge => PUBLIC_NW_NIC,
                :dev => PUBLIC_NW_NIC,
                :mode => "bridge",
                :ip => $vmip
        end

		# Synced Folder
        if VAGRANT_DEFAULT_PROVIDER == 'libvirt'
            subconfig.vm.synced_folder "data", '/vagrant', create: true, type: 'nfs'
        else
            subconfig.vm.synced_folder "data", '/vagrant', create: true
        end

        # Try to copy the user install scripts first, so we fail early
        if $userPostInstallScript != ""
            subconfig.vm.provision :file, source: $userPostInstallScript, destination: "/home/vagrant/userPostInstallScript.sh"
        end
        # Add SSH pub key from user if specified
        if $userSSHPubKey != ""
            subconfig.vm.provision :file, source: $userSSHPubKey, destination: "~/.ssh/user.pub"
            subconfig.vm.provision :shell, inline: 'cat /home/vagrant/.ssh/user.pub >> /home/vagrant/.ssh/authorized_keys'
        end
        # Run diskandreboot plugin to add VirtualBox disks to VMs
        if DISK_COUNT > 0 && VAGRANT_DEFAULT_PROVIDER == 'virtualbox'
            subconfig.vm.provision :diskandreboot
        end

        # Change timezone
        subconfig.vm.provision :shell,
            :inline => 'timedatectl set-timezone Asia/Seoul'

        case $hostname
		# Server Provision
        when 'server'
            subconfig.vm.network 'forwarded_port', guest: 80, host: $port
            # Get info
            subconfig.vm.provision :shell, inline: $serverGetInfo
            # Change Postgresql timezone
            subconfig.vm.provision :shell, inline: $serverChangePsqlTimezone
            # Setup NFS
            if $useLocalNFS
                subconfig.vm.provision :shell, inline: $serverSetupNFS
            else
                subconfig.vm.provision :shell, inline: $serverMountNFS, args: $nfsMountpath
            end
            # Add koji builder
            (1..$builderCount).each do |i|
                subconfig.vm.provision :shell, inline: $serverAddBuilder, args: "builder-#{i}"
            end

        # Builder Provision
        else
            # Isolated builder
            if $hostname == BUILDER_NAME
                subconfig.vm.provision :file, source: "./scripts/add-new-builder.sh", destination: "/home/vagrant/add-new-builder.sh"
                subconfig.vm.provision :shell, inline: $builderGetCert, args: $kojiHubIp
            end

            subconfig.vm.provision :shell,
                :inline => $builderMountNFS,
                :args => $nfsMountpath

            subconfig.vm.provision :shell do |s|
                s.inline = $builderKojidConf
                s.args = $hostname
            end
        end

        # Execute user PostInstallScript if exists
        if $userPostInstallScript != ""
            subconfig.vm.provision :shell, inline: 'echo "Execute userPostInstallScript"; bash /home/vagrant/userPostInstallScript.sh'
        end
    end
end
